#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/cma.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

CmaAllocInfoFtraceEvent::CmaAllocInfoFtraceEvent() = default;
CmaAllocInfoFtraceEvent::~CmaAllocInfoFtraceEvent() = default;
CmaAllocInfoFtraceEvent::CmaAllocInfoFtraceEvent(const CmaAllocInfoFtraceEvent&) = default;
CmaAllocInfoFtraceEvent& CmaAllocInfoFtraceEvent::operator=(const CmaAllocInfoFtraceEvent&) = default;
CmaAllocInfoFtraceEvent::CmaAllocInfoFtraceEvent(CmaAllocInfoFtraceEvent&&) noexcept = default;
CmaAllocInfoFtraceEvent& CmaAllocInfoFtraceEvent::operator=(CmaAllocInfoFtraceEvent&&) = default;

bool CmaAllocInfoFtraceEvent::operator==(const CmaAllocInfoFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && align_ == other.align_
   && count_ == other.count_
   && err_iso_ == other.err_iso_
   && err_mig_ == other.err_mig_
   && err_test_ == other.err_test_
   && name_ == other.name_
   && nr_mapped_ == other.nr_mapped_
   && nr_migrated_ == other.nr_migrated_
   && nr_reclaimed_ == other.nr_reclaimed_
   && pfn_ == other.pfn_;
}

bool CmaAllocInfoFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* align */:
        field.get(&align_);
        break;
      case 2 /* count */:
        field.get(&count_);
        break;
      case 3 /* err_iso */:
        field.get(&err_iso_);
        break;
      case 4 /* err_mig */:
        field.get(&err_mig_);
        break;
      case 5 /* err_test */:
        field.get(&err_test_);
        break;
      case 6 /* name */:
        field.get(&name_);
        break;
      case 7 /* nr_mapped */:
        field.get(&nr_mapped_);
        break;
      case 8 /* nr_migrated */:
        field.get(&nr_migrated_);
        break;
      case 9 /* nr_reclaimed */:
        field.get(&nr_reclaimed_);
        break;
      case 10 /* pfn */:
        field.get(&pfn_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CmaAllocInfoFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CmaAllocInfoFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CmaAllocInfoFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: align
  if (_has_field_[1]) {
    msg->AppendVarInt(1, align_);
  }

  // Field 2: count
  if (_has_field_[2]) {
    msg->AppendVarInt(2, count_);
  }

  // Field 3: err_iso
  if (_has_field_[3]) {
    msg->AppendVarInt(3, err_iso_);
  }

  // Field 4: err_mig
  if (_has_field_[4]) {
    msg->AppendVarInt(4, err_mig_);
  }

  // Field 5: err_test
  if (_has_field_[5]) {
    msg->AppendVarInt(5, err_test_);
  }

  // Field 6: name
  if (_has_field_[6]) {
    msg->AppendString(6, name_);
  }

  // Field 7: nr_mapped
  if (_has_field_[7]) {
    msg->AppendVarInt(7, nr_mapped_);
  }

  // Field 8: nr_migrated
  if (_has_field_[8]) {
    msg->AppendVarInt(8, nr_migrated_);
  }

  // Field 9: nr_reclaimed
  if (_has_field_[9]) {
    msg->AppendVarInt(9, nr_reclaimed_);
  }

  // Field 10: pfn
  if (_has_field_[10]) {
    msg->AppendVarInt(10, pfn_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


CmaAllocStartFtraceEvent::CmaAllocStartFtraceEvent() = default;
CmaAllocStartFtraceEvent::~CmaAllocStartFtraceEvent() = default;
CmaAllocStartFtraceEvent::CmaAllocStartFtraceEvent(const CmaAllocStartFtraceEvent&) = default;
CmaAllocStartFtraceEvent& CmaAllocStartFtraceEvent::operator=(const CmaAllocStartFtraceEvent&) = default;
CmaAllocStartFtraceEvent::CmaAllocStartFtraceEvent(CmaAllocStartFtraceEvent&&) noexcept = default;
CmaAllocStartFtraceEvent& CmaAllocStartFtraceEvent::operator=(CmaAllocStartFtraceEvent&&) = default;

bool CmaAllocStartFtraceEvent::operator==(const CmaAllocStartFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && align_ == other.align_
   && count_ == other.count_
   && name_ == other.name_;
}

bool CmaAllocStartFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* align */:
        field.get(&align_);
        break;
      case 2 /* count */:
        field.get(&count_);
        break;
      case 3 /* name */:
        field.get(&name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CmaAllocStartFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CmaAllocStartFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CmaAllocStartFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: align
  if (_has_field_[1]) {
    msg->AppendVarInt(1, align_);
  }

  // Field 2: count
  if (_has_field_[2]) {
    msg->AppendVarInt(2, count_);
  }

  // Field 3: name
  if (_has_field_[3]) {
    msg->AppendString(3, name_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif

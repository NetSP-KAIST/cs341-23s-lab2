#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/ufs.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

UfshcdClkGatingFtraceEvent::UfshcdClkGatingFtraceEvent() = default;
UfshcdClkGatingFtraceEvent::~UfshcdClkGatingFtraceEvent() = default;
UfshcdClkGatingFtraceEvent::UfshcdClkGatingFtraceEvent(const UfshcdClkGatingFtraceEvent&) = default;
UfshcdClkGatingFtraceEvent& UfshcdClkGatingFtraceEvent::operator=(const UfshcdClkGatingFtraceEvent&) = default;
UfshcdClkGatingFtraceEvent::UfshcdClkGatingFtraceEvent(UfshcdClkGatingFtraceEvent&&) noexcept = default;
UfshcdClkGatingFtraceEvent& UfshcdClkGatingFtraceEvent::operator=(UfshcdClkGatingFtraceEvent&&) = default;

bool UfshcdClkGatingFtraceEvent::operator==(const UfshcdClkGatingFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && dev_name_ == other.dev_name_
   && state_ == other.state_;
}

bool UfshcdClkGatingFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev_name */:
        field.get(&dev_name_);
        break;
      case 2 /* state */:
        field.get(&state_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string UfshcdClkGatingFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> UfshcdClkGatingFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void UfshcdClkGatingFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev_name
  if (_has_field_[1]) {
    msg->AppendString(1, dev_name_);
  }

  // Field 2: state
  if (_has_field_[2]) {
    msg->AppendVarInt(2, state_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


UfshcdCommandFtraceEvent::UfshcdCommandFtraceEvent() = default;
UfshcdCommandFtraceEvent::~UfshcdCommandFtraceEvent() = default;
UfshcdCommandFtraceEvent::UfshcdCommandFtraceEvent(const UfshcdCommandFtraceEvent&) = default;
UfshcdCommandFtraceEvent& UfshcdCommandFtraceEvent::operator=(const UfshcdCommandFtraceEvent&) = default;
UfshcdCommandFtraceEvent::UfshcdCommandFtraceEvent(UfshcdCommandFtraceEvent&&) noexcept = default;
UfshcdCommandFtraceEvent& UfshcdCommandFtraceEvent::operator=(UfshcdCommandFtraceEvent&&) = default;

bool UfshcdCommandFtraceEvent::operator==(const UfshcdCommandFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && dev_name_ == other.dev_name_
   && doorbell_ == other.doorbell_
   && intr_ == other.intr_
   && lba_ == other.lba_
   && opcode_ == other.opcode_
   && str_ == other.str_
   && tag_ == other.tag_
   && transfer_len_ == other.transfer_len_
   && group_id_ == other.group_id_
   && str_t_ == other.str_t_;
}

bool UfshcdCommandFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev_name */:
        field.get(&dev_name_);
        break;
      case 2 /* doorbell */:
        field.get(&doorbell_);
        break;
      case 3 /* intr */:
        field.get(&intr_);
        break;
      case 4 /* lba */:
        field.get(&lba_);
        break;
      case 5 /* opcode */:
        field.get(&opcode_);
        break;
      case 6 /* str */:
        field.get(&str_);
        break;
      case 7 /* tag */:
        field.get(&tag_);
        break;
      case 8 /* transfer_len */:
        field.get(&transfer_len_);
        break;
      case 9 /* group_id */:
        field.get(&group_id_);
        break;
      case 10 /* str_t */:
        field.get(&str_t_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string UfshcdCommandFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> UfshcdCommandFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void UfshcdCommandFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev_name
  if (_has_field_[1]) {
    msg->AppendString(1, dev_name_);
  }

  // Field 2: doorbell
  if (_has_field_[2]) {
    msg->AppendVarInt(2, doorbell_);
  }

  // Field 3: intr
  if (_has_field_[3]) {
    msg->AppendVarInt(3, intr_);
  }

  // Field 4: lba
  if (_has_field_[4]) {
    msg->AppendVarInt(4, lba_);
  }

  // Field 5: opcode
  if (_has_field_[5]) {
    msg->AppendVarInt(5, opcode_);
  }

  // Field 6: str
  if (_has_field_[6]) {
    msg->AppendString(6, str_);
  }

  // Field 7: tag
  if (_has_field_[7]) {
    msg->AppendVarInt(7, tag_);
  }

  // Field 8: transfer_len
  if (_has_field_[8]) {
    msg->AppendVarInt(8, transfer_len_);
  }

  // Field 9: group_id
  if (_has_field_[9]) {
    msg->AppendVarInt(9, group_id_);
  }

  // Field 10: str_t
  if (_has_field_[10]) {
    msg->AppendVarInt(10, str_t_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif

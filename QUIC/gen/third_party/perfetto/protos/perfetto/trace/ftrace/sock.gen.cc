#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/sock.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

InetSockSetStateFtraceEvent::InetSockSetStateFtraceEvent() = default;
InetSockSetStateFtraceEvent::~InetSockSetStateFtraceEvent() = default;
InetSockSetStateFtraceEvent::InetSockSetStateFtraceEvent(const InetSockSetStateFtraceEvent&) = default;
InetSockSetStateFtraceEvent& InetSockSetStateFtraceEvent::operator=(const InetSockSetStateFtraceEvent&) = default;
InetSockSetStateFtraceEvent::InetSockSetStateFtraceEvent(InetSockSetStateFtraceEvent&&) noexcept = default;
InetSockSetStateFtraceEvent& InetSockSetStateFtraceEvent::operator=(InetSockSetStateFtraceEvent&&) = default;

bool InetSockSetStateFtraceEvent::operator==(const InetSockSetStateFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && daddr_ == other.daddr_
   && dport_ == other.dport_
   && family_ == other.family_
   && newstate_ == other.newstate_
   && oldstate_ == other.oldstate_
   && protocol_ == other.protocol_
   && saddr_ == other.saddr_
   && skaddr_ == other.skaddr_
   && sport_ == other.sport_;
}

bool InetSockSetStateFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* daddr */:
        field.get(&daddr_);
        break;
      case 2 /* dport */:
        field.get(&dport_);
        break;
      case 3 /* family */:
        field.get(&family_);
        break;
      case 4 /* newstate */:
        field.get(&newstate_);
        break;
      case 5 /* oldstate */:
        field.get(&oldstate_);
        break;
      case 6 /* protocol */:
        field.get(&protocol_);
        break;
      case 7 /* saddr */:
        field.get(&saddr_);
        break;
      case 8 /* skaddr */:
        field.get(&skaddr_);
        break;
      case 9 /* sport */:
        field.get(&sport_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string InetSockSetStateFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> InetSockSetStateFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void InetSockSetStateFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: daddr
  if (_has_field_[1]) {
    msg->AppendVarInt(1, daddr_);
  }

  // Field 2: dport
  if (_has_field_[2]) {
    msg->AppendVarInt(2, dport_);
  }

  // Field 3: family
  if (_has_field_[3]) {
    msg->AppendVarInt(3, family_);
  }

  // Field 4: newstate
  if (_has_field_[4]) {
    msg->AppendVarInt(4, newstate_);
  }

  // Field 5: oldstate
  if (_has_field_[5]) {
    msg->AppendVarInt(5, oldstate_);
  }

  // Field 6: protocol
  if (_has_field_[6]) {
    msg->AppendVarInt(6, protocol_);
  }

  // Field 7: saddr
  if (_has_field_[7]) {
    msg->AppendVarInt(7, saddr_);
  }

  // Field 8: skaddr
  if (_has_field_[8]) {
    msg->AppendVarInt(8, skaddr_);
  }

  // Field 9: sport
  if (_has_field_[9]) {
    msg->AppendVarInt(9, sport_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif

#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/perfetto/perfetto_metatrace.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

PerfettoMetatrace::PerfettoMetatrace() = default;
PerfettoMetatrace::~PerfettoMetatrace() = default;
PerfettoMetatrace::PerfettoMetatrace(const PerfettoMetatrace&) = default;
PerfettoMetatrace& PerfettoMetatrace::operator=(const PerfettoMetatrace&) = default;
PerfettoMetatrace::PerfettoMetatrace(PerfettoMetatrace&&) noexcept = default;
PerfettoMetatrace& PerfettoMetatrace::operator=(PerfettoMetatrace&&) = default;

bool PerfettoMetatrace::operator==(const PerfettoMetatrace& other) const {
  return unknown_fields_ == other.unknown_fields_
   && event_id_ == other.event_id_
   && counter_id_ == other.counter_id_
   && event_name_ == other.event_name_
   && event_name_iid_ == other.event_name_iid_
   && counter_name_ == other.counter_name_
   && event_duration_ns_ == other.event_duration_ns_
   && counter_value_ == other.counter_value_
   && thread_id_ == other.thread_id_
   && has_overruns_ == other.has_overruns_
   && args_ == other.args_
   && interned_strings_ == other.interned_strings_;
}

int PerfettoMetatrace::args_size() const { return static_cast<int>(args_.size()); }
void PerfettoMetatrace::clear_args() { args_.clear(); }
PerfettoMetatrace_Arg* PerfettoMetatrace::add_args() { args_.emplace_back(); return &args_.back(); }
int PerfettoMetatrace::interned_strings_size() const { return static_cast<int>(interned_strings_.size()); }
void PerfettoMetatrace::clear_interned_strings() { interned_strings_.clear(); }
PerfettoMetatrace_InternedString* PerfettoMetatrace::add_interned_strings() { interned_strings_.emplace_back(); return &interned_strings_.back(); }
bool PerfettoMetatrace::ParseFromArray(const void* raw, size_t size) {
  args_.clear();
  interned_strings_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* event_id */:
        field.get(&event_id_);
        break;
      case 2 /* counter_id */:
        field.get(&counter_id_);
        break;
      case 8 /* event_name */:
        field.get(&event_name_);
        break;
      case 11 /* event_name_iid */:
        field.get(&event_name_iid_);
        break;
      case 9 /* counter_name */:
        field.get(&counter_name_);
        break;
      case 3 /* event_duration_ns */:
        field.get(&event_duration_ns_);
        break;
      case 4 /* counter_value */:
        field.get(&counter_value_);
        break;
      case 5 /* thread_id */:
        field.get(&thread_id_);
        break;
      case 6 /* has_overruns */:
        field.get(&has_overruns_);
        break;
      case 7 /* args */:
        args_.emplace_back();
        args_.back().ParseFromArray(field.data(), field.size());
        break;
      case 10 /* interned_strings */:
        interned_strings_.emplace_back();
        interned_strings_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PerfettoMetatrace::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PerfettoMetatrace::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PerfettoMetatrace::Serialize(::protozero::Message* msg) const {
  // Field 1: event_id
  if (_has_field_[1]) {
    msg->AppendVarInt(1, event_id_);
  }

  // Field 2: counter_id
  if (_has_field_[2]) {
    msg->AppendVarInt(2, counter_id_);
  }

  // Field 8: event_name
  if (_has_field_[8]) {
    msg->AppendString(8, event_name_);
  }

  // Field 11: event_name_iid
  if (_has_field_[11]) {
    msg->AppendVarInt(11, event_name_iid_);
  }

  // Field 9: counter_name
  if (_has_field_[9]) {
    msg->AppendString(9, counter_name_);
  }

  // Field 3: event_duration_ns
  if (_has_field_[3]) {
    msg->AppendVarInt(3, event_duration_ns_);
  }

  // Field 4: counter_value
  if (_has_field_[4]) {
    msg->AppendVarInt(4, counter_value_);
  }

  // Field 5: thread_id
  if (_has_field_[5]) {
    msg->AppendVarInt(5, thread_id_);
  }

  // Field 6: has_overruns
  if (_has_field_[6]) {
    msg->AppendTinyVarInt(6, has_overruns_);
  }

  // Field 7: args
  for (auto& it : args_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(7));
  }

  // Field 10: interned_strings
  for (auto& it : interned_strings_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(10));
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


PerfettoMetatrace_InternedString::PerfettoMetatrace_InternedString() = default;
PerfettoMetatrace_InternedString::~PerfettoMetatrace_InternedString() = default;
PerfettoMetatrace_InternedString::PerfettoMetatrace_InternedString(const PerfettoMetatrace_InternedString&) = default;
PerfettoMetatrace_InternedString& PerfettoMetatrace_InternedString::operator=(const PerfettoMetatrace_InternedString&) = default;
PerfettoMetatrace_InternedString::PerfettoMetatrace_InternedString(PerfettoMetatrace_InternedString&&) noexcept = default;
PerfettoMetatrace_InternedString& PerfettoMetatrace_InternedString::operator=(PerfettoMetatrace_InternedString&&) = default;

bool PerfettoMetatrace_InternedString::operator==(const PerfettoMetatrace_InternedString& other) const {
  return unknown_fields_ == other.unknown_fields_
   && iid_ == other.iid_
   && value_ == other.value_;
}

bool PerfettoMetatrace_InternedString::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* iid */:
        field.get(&iid_);
        break;
      case 2 /* value */:
        field.get(&value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PerfettoMetatrace_InternedString::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PerfettoMetatrace_InternedString::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PerfettoMetatrace_InternedString::Serialize(::protozero::Message* msg) const {
  // Field 1: iid
  if (_has_field_[1]) {
    msg->AppendVarInt(1, iid_);
  }

  // Field 2: value
  if (_has_field_[2]) {
    msg->AppendString(2, value_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


PerfettoMetatrace_Arg::PerfettoMetatrace_Arg() = default;
PerfettoMetatrace_Arg::~PerfettoMetatrace_Arg() = default;
PerfettoMetatrace_Arg::PerfettoMetatrace_Arg(const PerfettoMetatrace_Arg&) = default;
PerfettoMetatrace_Arg& PerfettoMetatrace_Arg::operator=(const PerfettoMetatrace_Arg&) = default;
PerfettoMetatrace_Arg::PerfettoMetatrace_Arg(PerfettoMetatrace_Arg&&) noexcept = default;
PerfettoMetatrace_Arg& PerfettoMetatrace_Arg::operator=(PerfettoMetatrace_Arg&&) = default;

bool PerfettoMetatrace_Arg::operator==(const PerfettoMetatrace_Arg& other) const {
  return unknown_fields_ == other.unknown_fields_
   && key_ == other.key_
   && key_iid_ == other.key_iid_
   && value_ == other.value_
   && value_iid_ == other.value_iid_;
}

bool PerfettoMetatrace_Arg::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* key */:
        field.get(&key_);
        break;
      case 3 /* key_iid */:
        field.get(&key_iid_);
        break;
      case 2 /* value */:
        field.get(&value_);
        break;
      case 4 /* value_iid */:
        field.get(&value_iid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PerfettoMetatrace_Arg::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PerfettoMetatrace_Arg::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PerfettoMetatrace_Arg::Serialize(::protozero::Message* msg) const {
  // Field 1: key
  if (_has_field_[1]) {
    msg->AppendString(1, key_);
  }

  // Field 3: key_iid
  if (_has_field_[3]) {
    msg->AppendVarInt(3, key_iid_);
  }

  // Field 2: value
  if (_has_field_[2]) {
    msg->AppendString(2, value_);
  }

  // Field 4: value_iid
  if (_has_field_[4]) {
    msg->AppendVarInt(4, value_iid_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif

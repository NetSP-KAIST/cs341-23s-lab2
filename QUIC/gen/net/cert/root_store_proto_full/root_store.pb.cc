// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: root_store.proto

#include "root_store.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chrome_root_store {
PROTOBUF_CONSTEXPR TrustAnchor::TrustAnchor(
    ::_pbi::ConstantInitialized)
  : ev_policy_oids_()
  , _oneof_case_{}{}
struct TrustAnchorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustAnchorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustAnchorDefaultTypeInternal() {}
  union {
    TrustAnchor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustAnchorDefaultTypeInternal _TrustAnchor_default_instance_;
PROTOBUF_CONSTEXPR RootStore::RootStore(
    ::_pbi::ConstantInitialized)
  : trust_anchors_()
  , version_major_(int64_t{0}){}
struct RootStoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RootStoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RootStoreDefaultTypeInternal() {}
  union {
    RootStore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RootStoreDefaultTypeInternal _RootStore_default_instance_;
}  // namespace chrome_root_store
static ::_pb::Metadata file_level_metadata_root_5fstore_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_root_5fstore_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_root_5fstore_2eproto = nullptr;

const uint32_t TableStruct_root_5fstore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chrome_root_store::TrustAnchor, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::chrome_root_store::TrustAnchor, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::chrome_root_store::TrustAnchor, ev_policy_oids_),
  PROTOBUF_FIELD_OFFSET(::chrome_root_store::TrustAnchor, certificate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chrome_root_store::RootStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chrome_root_store::RootStore, trust_anchors_),
  PROTOBUF_FIELD_OFFSET(::chrome_root_store::RootStore, version_major_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::chrome_root_store::TrustAnchor)},
  { 10, -1, -1, sizeof(::chrome_root_store::RootStore)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::chrome_root_store::_TrustAnchor_default_instance_._instance,
  &::chrome_root_store::_RootStore_default_instance_._instance,
};

const char descriptor_table_protodef_root_5fstore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020root_store.proto\022\021chrome_root_store\"Y\n"
  "\013TrustAnchor\022\r\n\003der\030\001 \001(\014H\000\022\024\n\nsha256_he"
  "x\030\002 \001(\tH\000\022\026\n\016ev_policy_oids\030\003 \003(\tB\r\n\013cer"
  "tificate\"Y\n\tRootStore\0225\n\rtrust_anchors\030\001"
  " \003(\0132\036.chrome_root_store.TrustAnchor\022\025\n\r"
  "version_major\030\002 \001(\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_root_5fstore_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_root_5fstore_2eproto = {
    false, false, 227, descriptor_table_protodef_root_5fstore_2eproto,
    "root_store.proto",
    &descriptor_table_root_5fstore_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_root_5fstore_2eproto::offsets,
    file_level_metadata_root_5fstore_2eproto, file_level_enum_descriptors_root_5fstore_2eproto,
    file_level_service_descriptors_root_5fstore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_root_5fstore_2eproto_getter() {
  return &descriptor_table_root_5fstore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_root_5fstore_2eproto(&descriptor_table_root_5fstore_2eproto);
namespace chrome_root_store {

// ===================================================================

class TrustAnchor::_Internal {
 public:
};

TrustAnchor::TrustAnchor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ev_policy_oids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_root_store.TrustAnchor)
}
TrustAnchor::TrustAnchor(const TrustAnchor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ev_policy_oids_(from.ev_policy_oids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_certificate();
  switch (from.certificate_case()) {
    case kDer: {
      _internal_set_der(from._internal_der());
      break;
    }
    case kSha256Hex: {
      _internal_set_sha256_hex(from._internal_sha256_hex());
      break;
    }
    case CERTIFICATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:chrome_root_store.TrustAnchor)
}

inline void TrustAnchor::SharedCtor() {
clear_has_certificate();
}

TrustAnchor::~TrustAnchor() {
  // @@protoc_insertion_point(destructor:chrome_root_store.TrustAnchor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustAnchor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_certificate()) {
    clear_certificate();
  }
}

void TrustAnchor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustAnchor::clear_certificate() {
// @@protoc_insertion_point(one_of_clear_start:chrome_root_store.TrustAnchor)
  switch (certificate_case()) {
    case kDer: {
      certificate_.der_.Destroy();
      break;
    }
    case kSha256Hex: {
      certificate_.sha256_hex_.Destroy();
      break;
    }
    case CERTIFICATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CERTIFICATE_NOT_SET;
}


void TrustAnchor::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_root_store.TrustAnchor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ev_policy_oids_.Clear();
  clear_certificate();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustAnchor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes der = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_der();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sha256_hex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sha256_hex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chrome_root_store.TrustAnchor.sha256_hex"));
        } else
          goto handle_unusual;
        continue;
      // repeated string ev_policy_oids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ev_policy_oids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "chrome_root_store.TrustAnchor.ev_policy_oids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustAnchor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_root_store.TrustAnchor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes der = 1;
  if (_internal_has_der()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_der(), target);
  }

  // string sha256_hex = 2;
  if (_internal_has_sha256_hex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sha256_hex().data(), static_cast<int>(this->_internal_sha256_hex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_root_store.TrustAnchor.sha256_hex");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sha256_hex(), target);
  }

  // repeated string ev_policy_oids = 3;
  for (int i = 0, n = this->_internal_ev_policy_oids_size(); i < n; i++) {
    const auto& s = this->_internal_ev_policy_oids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_root_store.TrustAnchor.ev_policy_oids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_root_store.TrustAnchor)
  return target;
}

size_t TrustAnchor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_root_store.TrustAnchor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ev_policy_oids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ev_policy_oids_.size());
  for (int i = 0, n = ev_policy_oids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ev_policy_oids_.Get(i));
  }

  switch (certificate_case()) {
    // bytes der = 1;
    case kDer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_der());
      break;
    }
    // string sha256_hex = 2;
    case kSha256Hex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sha256_hex());
      break;
    }
    case CERTIFICATE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustAnchor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrustAnchor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustAnchor::GetClassData() const { return &_class_data_; }

void TrustAnchor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrustAnchor *>(to)->MergeFrom(
      static_cast<const TrustAnchor &>(from));
}


void TrustAnchor::MergeFrom(const TrustAnchor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_root_store.TrustAnchor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ev_policy_oids_.MergeFrom(from.ev_policy_oids_);
  switch (from.certificate_case()) {
    case kDer: {
      _internal_set_der(from._internal_der());
      break;
    }
    case kSha256Hex: {
      _internal_set_sha256_hex(from._internal_sha256_hex());
      break;
    }
    case CERTIFICATE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustAnchor::CopyFrom(const TrustAnchor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_root_store.TrustAnchor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustAnchor::IsInitialized() const {
  return true;
}

void TrustAnchor::InternalSwap(TrustAnchor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ev_policy_oids_.InternalSwap(&other->ev_policy_oids_);
  swap(certificate_, other->certificate_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustAnchor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_root_5fstore_2eproto_getter, &descriptor_table_root_5fstore_2eproto_once,
      file_level_metadata_root_5fstore_2eproto[0]);
}

// ===================================================================

class RootStore::_Internal {
 public:
};

RootStore::RootStore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  trust_anchors_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_root_store.RootStore)
}
RootStore::RootStore(const RootStore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trust_anchors_(from.trust_anchors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_major_ = from.version_major_;
  // @@protoc_insertion_point(copy_constructor:chrome_root_store.RootStore)
}

inline void RootStore::SharedCtor() {
version_major_ = int64_t{0};
}

RootStore::~RootStore() {
  // @@protoc_insertion_point(destructor:chrome_root_store.RootStore)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RootStore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RootStore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RootStore::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_root_store.RootStore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trust_anchors_.Clear();
  version_major_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RootStore::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .chrome_root_store.TrustAnchor trust_anchors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trust_anchors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 version_major = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          version_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RootStore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_root_store.RootStore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chrome_root_store.TrustAnchor trust_anchors = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trust_anchors_size()); i < n; i++) {
    const auto& repfield = this->_internal_trust_anchors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 version_major = 2;
  if (this->_internal_version_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_version_major(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_root_store.RootStore)
  return target;
}

size_t RootStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_root_store.RootStore)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chrome_root_store.TrustAnchor trust_anchors = 1;
  total_size += 1UL * this->_internal_trust_anchors_size();
  for (const auto& msg : this->trust_anchors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 version_major = 2;
  if (this->_internal_version_major() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version_major());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RootStore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RootStore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RootStore::GetClassData() const { return &_class_data_; }

void RootStore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RootStore *>(to)->MergeFrom(
      static_cast<const RootStore &>(from));
}


void RootStore::MergeFrom(const RootStore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_root_store.RootStore)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  trust_anchors_.MergeFrom(from.trust_anchors_);
  if (from._internal_version_major() != 0) {
    _internal_set_version_major(from._internal_version_major());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RootStore::CopyFrom(const RootStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_root_store.RootStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootStore::IsInitialized() const {
  return true;
}

void RootStore::InternalSwap(RootStore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  trust_anchors_.InternalSwap(&other->trust_anchors_);
  swap(version_major_, other->version_major_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RootStore::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_root_5fstore_2eproto_getter, &descriptor_table_root_5fstore_2eproto_once,
      file_level_metadata_root_5fstore_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_root_store
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_root_store::TrustAnchor*
Arena::CreateMaybeMessage< ::chrome_root_store::TrustAnchor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_root_store::TrustAnchor >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_root_store::RootStore*
Arena::CreateMaybeMessage< ::chrome_root_store::RootStore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_root_store::RootStore >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

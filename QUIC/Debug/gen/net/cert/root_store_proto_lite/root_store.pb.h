// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: root_store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_root_5fstore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_root_5fstore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_root_5fstore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_root_5fstore_2eproto {
  static const uint32_t offsets[];
};
namespace chrome_root_store {
class RootStore;
struct RootStoreDefaultTypeInternal;
extern RootStoreDefaultTypeInternal _RootStore_default_instance_;
class TrustAnchor;
struct TrustAnchorDefaultTypeInternal;
extern TrustAnchorDefaultTypeInternal _TrustAnchor_default_instance_;
}  // namespace chrome_root_store
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_root_store::RootStore* Arena::CreateMaybeMessage<::chrome_root_store::RootStore>(Arena*);
template<> ::chrome_root_store::TrustAnchor* Arena::CreateMaybeMessage<::chrome_root_store::TrustAnchor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_root_store {

// ===================================================================

class TrustAnchor final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_root_store.TrustAnchor) */ {
 public:
  inline TrustAnchor() : TrustAnchor(nullptr) {}
  ~TrustAnchor() override;
  explicit PROTOBUF_CONSTEXPR TrustAnchor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustAnchor(const TrustAnchor& from);
  TrustAnchor(TrustAnchor&& from) noexcept
    : TrustAnchor() {
    *this = ::std::move(from);
  }

  inline TrustAnchor& operator=(const TrustAnchor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustAnchor& operator=(TrustAnchor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TrustAnchor& default_instance() {
    return *internal_default_instance();
  }
  enum CertificateCase {
    kDer = 1,
    kSha256Hex = 2,
    CERTIFICATE_NOT_SET = 0,
  };

  static inline const TrustAnchor* internal_default_instance() {
    return reinterpret_cast<const TrustAnchor*>(
               &_TrustAnchor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrustAnchor& a, TrustAnchor& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TrustAnchor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustAnchor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustAnchor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustAnchor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TrustAnchor& from);
  void MergeFrom(const TrustAnchor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustAnchor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_root_store.TrustAnchor";
  }
  protected:
  explicit TrustAnchor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvPolicyOidsFieldNumber = 3,
    kDerFieldNumber = 1,
    kSha256HexFieldNumber = 2,
  };
  // repeated string ev_policy_oids = 3;
  int ev_policy_oids_size() const;
  private:
  int _internal_ev_policy_oids_size() const;
  public:
  void clear_ev_policy_oids();
  const std::string& ev_policy_oids(int index) const;
  std::string* mutable_ev_policy_oids(int index);
  void set_ev_policy_oids(int index, const std::string& value);
  void set_ev_policy_oids(int index, std::string&& value);
  void set_ev_policy_oids(int index, const char* value);
  void set_ev_policy_oids(int index, const char* value, size_t size);
  std::string* add_ev_policy_oids();
  void add_ev_policy_oids(const std::string& value);
  void add_ev_policy_oids(std::string&& value);
  void add_ev_policy_oids(const char* value);
  void add_ev_policy_oids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ev_policy_oids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ev_policy_oids();
  private:
  const std::string& _internal_ev_policy_oids(int index) const;
  std::string* _internal_add_ev_policy_oids();
  public:

  // bytes der = 1;
  bool has_der() const;
  private:
  bool _internal_has_der() const;
  public:
  void clear_der();
  const std::string& der() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_der(ArgT0&& arg0, ArgT... args);
  std::string* mutable_der();
  PROTOBUF_NODISCARD std::string* release_der();
  void set_allocated_der(std::string* der);
  private:
  const std::string& _internal_der() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_der(const std::string& value);
  std::string* _internal_mutable_der();
  public:

  // string sha256_hex = 2;
  bool has_sha256_hex() const;
  private:
  bool _internal_has_sha256_hex() const;
  public:
  void clear_sha256_hex();
  const std::string& sha256_hex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha256_hex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha256_hex();
  PROTOBUF_NODISCARD std::string* release_sha256_hex();
  void set_allocated_sha256_hex(std::string* sha256_hex);
  private:
  const std::string& _internal_sha256_hex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha256_hex(const std::string& value);
  std::string* _internal_mutable_sha256_hex();
  public:

  void clear_certificate();
  CertificateCase certificate_case() const;
  // @@protoc_insertion_point(class_scope:chrome_root_store.TrustAnchor)
 private:
  class _Internal;
  void set_has_der();
  void set_has_sha256_hex();

  inline bool has_certificate() const;
  inline void clear_has_certificate();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ev_policy_oids_;
  union CertificateUnion {
    constexpr CertificateUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr der_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha256_hex_;
  } certificate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_root_5fstore_2eproto;
};
// -------------------------------------------------------------------

class RootStore final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_root_store.RootStore) */ {
 public:
  inline RootStore() : RootStore(nullptr) {}
  ~RootStore() override;
  explicit PROTOBUF_CONSTEXPR RootStore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RootStore(const RootStore& from);
  RootStore(RootStore&& from) noexcept
    : RootStore() {
    *this = ::std::move(from);
  }

  inline RootStore& operator=(const RootStore& from) {
    CopyFrom(from);
    return *this;
  }
  inline RootStore& operator=(RootStore&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RootStore& default_instance() {
    return *internal_default_instance();
  }
  static inline const RootStore* internal_default_instance() {
    return reinterpret_cast<const RootStore*>(
               &_RootStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RootStore& a, RootStore& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RootStore* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RootStore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RootStore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RootStore>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RootStore& from);
  void MergeFrom(const RootStore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RootStore* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_root_store.RootStore";
  }
  protected:
  explicit RootStore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrustAnchorsFieldNumber = 1,
    kVersionMajorFieldNumber = 2,
  };
  // repeated .chrome_root_store.TrustAnchor trust_anchors = 1;
  int trust_anchors_size() const;
  private:
  int _internal_trust_anchors_size() const;
  public:
  void clear_trust_anchors();
  ::chrome_root_store::TrustAnchor* mutable_trust_anchors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::TrustAnchor >*
      mutable_trust_anchors();
  private:
  const ::chrome_root_store::TrustAnchor& _internal_trust_anchors(int index) const;
  ::chrome_root_store::TrustAnchor* _internal_add_trust_anchors();
  public:
  const ::chrome_root_store::TrustAnchor& trust_anchors(int index) const;
  ::chrome_root_store::TrustAnchor* add_trust_anchors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::TrustAnchor >&
      trust_anchors() const;

  // int64 version_major = 2;
  void clear_version_major();
  int64_t version_major() const;
  void set_version_major(int64_t value);
  private:
  int64_t _internal_version_major() const;
  void _internal_set_version_major(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_root_store.RootStore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::TrustAnchor > trust_anchors_;
  int64_t version_major_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_root_5fstore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrustAnchor

// bytes der = 1;
inline bool TrustAnchor::_internal_has_der() const {
  return certificate_case() == kDer;
}
inline bool TrustAnchor::has_der() const {
  return _internal_has_der();
}
inline void TrustAnchor::set_has_der() {
  _oneof_case_[0] = kDer;
}
inline void TrustAnchor::clear_der() {
  if (_internal_has_der()) {
    certificate_.der_.Destroy();
    clear_has_certificate();
  }
}
inline const std::string& TrustAnchor::der() const {
  // @@protoc_insertion_point(field_get:chrome_root_store.TrustAnchor.der)
  return _internal_der();
}
template <typename ArgT0, typename... ArgT>
inline void TrustAnchor::set_der(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_der()) {
    clear_certificate();
    set_has_der();
    certificate_.der_.InitDefault();
  }
  certificate_.der_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_root_store.TrustAnchor.der)
}
inline std::string* TrustAnchor::mutable_der() {
  std::string* _s = _internal_mutable_der();
  // @@protoc_insertion_point(field_mutable:chrome_root_store.TrustAnchor.der)
  return _s;
}
inline const std::string& TrustAnchor::_internal_der() const {
  if (_internal_has_der()) {
    return certificate_.der_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TrustAnchor::_internal_set_der(const std::string& value) {
  if (!_internal_has_der()) {
    clear_certificate();
    set_has_der();
    certificate_.der_.InitDefault();
  }
  certificate_.der_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustAnchor::_internal_mutable_der() {
  if (!_internal_has_der()) {
    clear_certificate();
    set_has_der();
    certificate_.der_.InitDefault();
  }
  return certificate_.der_.Mutable(      GetArenaForAllocation());
}
inline std::string* TrustAnchor::release_der() {
  // @@protoc_insertion_point(field_release:chrome_root_store.TrustAnchor.der)
  if (_internal_has_der()) {
    clear_has_certificate();
    return certificate_.der_.Release();
  } else {
    return nullptr;
  }
}
inline void TrustAnchor::set_allocated_der(std::string* der) {
  if (has_certificate()) {
    clear_certificate();
  }
  if (der != nullptr) {
    set_has_der();
    certificate_.der_.InitAllocated(der, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_root_store.TrustAnchor.der)
}

// string sha256_hex = 2;
inline bool TrustAnchor::_internal_has_sha256_hex() const {
  return certificate_case() == kSha256Hex;
}
inline bool TrustAnchor::has_sha256_hex() const {
  return _internal_has_sha256_hex();
}
inline void TrustAnchor::set_has_sha256_hex() {
  _oneof_case_[0] = kSha256Hex;
}
inline void TrustAnchor::clear_sha256_hex() {
  if (_internal_has_sha256_hex()) {
    certificate_.sha256_hex_.Destroy();
    clear_has_certificate();
  }
}
inline const std::string& TrustAnchor::sha256_hex() const {
  // @@protoc_insertion_point(field_get:chrome_root_store.TrustAnchor.sha256_hex)
  return _internal_sha256_hex();
}
template <typename ArgT0, typename... ArgT>
inline void TrustAnchor::set_sha256_hex(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_sha256_hex()) {
    clear_certificate();
    set_has_sha256_hex();
    certificate_.sha256_hex_.InitDefault();
  }
  certificate_.sha256_hex_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_root_store.TrustAnchor.sha256_hex)
}
inline std::string* TrustAnchor::mutable_sha256_hex() {
  std::string* _s = _internal_mutable_sha256_hex();
  // @@protoc_insertion_point(field_mutable:chrome_root_store.TrustAnchor.sha256_hex)
  return _s;
}
inline const std::string& TrustAnchor::_internal_sha256_hex() const {
  if (_internal_has_sha256_hex()) {
    return certificate_.sha256_hex_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TrustAnchor::_internal_set_sha256_hex(const std::string& value) {
  if (!_internal_has_sha256_hex()) {
    clear_certificate();
    set_has_sha256_hex();
    certificate_.sha256_hex_.InitDefault();
  }
  certificate_.sha256_hex_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustAnchor::_internal_mutable_sha256_hex() {
  if (!_internal_has_sha256_hex()) {
    clear_certificate();
    set_has_sha256_hex();
    certificate_.sha256_hex_.InitDefault();
  }
  return certificate_.sha256_hex_.Mutable(      GetArenaForAllocation());
}
inline std::string* TrustAnchor::release_sha256_hex() {
  // @@protoc_insertion_point(field_release:chrome_root_store.TrustAnchor.sha256_hex)
  if (_internal_has_sha256_hex()) {
    clear_has_certificate();
    return certificate_.sha256_hex_.Release();
  } else {
    return nullptr;
  }
}
inline void TrustAnchor::set_allocated_sha256_hex(std::string* sha256_hex) {
  if (has_certificate()) {
    clear_certificate();
  }
  if (sha256_hex != nullptr) {
    set_has_sha256_hex();
    certificate_.sha256_hex_.InitAllocated(sha256_hex, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_root_store.TrustAnchor.sha256_hex)
}

// repeated string ev_policy_oids = 3;
inline int TrustAnchor::_internal_ev_policy_oids_size() const {
  return ev_policy_oids_.size();
}
inline int TrustAnchor::ev_policy_oids_size() const {
  return _internal_ev_policy_oids_size();
}
inline void TrustAnchor::clear_ev_policy_oids() {
  ev_policy_oids_.Clear();
}
inline std::string* TrustAnchor::add_ev_policy_oids() {
  std::string* _s = _internal_add_ev_policy_oids();
  // @@protoc_insertion_point(field_add_mutable:chrome_root_store.TrustAnchor.ev_policy_oids)
  return _s;
}
inline const std::string& TrustAnchor::_internal_ev_policy_oids(int index) const {
  return ev_policy_oids_.Get(index);
}
inline const std::string& TrustAnchor::ev_policy_oids(int index) const {
  // @@protoc_insertion_point(field_get:chrome_root_store.TrustAnchor.ev_policy_oids)
  return _internal_ev_policy_oids(index);
}
inline std::string* TrustAnchor::mutable_ev_policy_oids(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_root_store.TrustAnchor.ev_policy_oids)
  return ev_policy_oids_.Mutable(index);
}
inline void TrustAnchor::set_ev_policy_oids(int index, const std::string& value) {
  ev_policy_oids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline void TrustAnchor::set_ev_policy_oids(int index, std::string&& value) {
  ev_policy_oids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline void TrustAnchor::set_ev_policy_oids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ev_policy_oids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline void TrustAnchor::set_ev_policy_oids(int index, const char* value, size_t size) {
  ev_policy_oids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline std::string* TrustAnchor::_internal_add_ev_policy_oids() {
  return ev_policy_oids_.Add();
}
inline void TrustAnchor::add_ev_policy_oids(const std::string& value) {
  ev_policy_oids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline void TrustAnchor::add_ev_policy_oids(std::string&& value) {
  ev_policy_oids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline void TrustAnchor::add_ev_policy_oids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ev_policy_oids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline void TrustAnchor::add_ev_policy_oids(const char* value, size_t size) {
  ev_policy_oids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrustAnchor::ev_policy_oids() const {
  // @@protoc_insertion_point(field_list:chrome_root_store.TrustAnchor.ev_policy_oids)
  return ev_policy_oids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrustAnchor::mutable_ev_policy_oids() {
  // @@protoc_insertion_point(field_mutable_list:chrome_root_store.TrustAnchor.ev_policy_oids)
  return &ev_policy_oids_;
}

inline bool TrustAnchor::has_certificate() const {
  return certificate_case() != CERTIFICATE_NOT_SET;
}
inline void TrustAnchor::clear_has_certificate() {
  _oneof_case_[0] = CERTIFICATE_NOT_SET;
}
inline TrustAnchor::CertificateCase TrustAnchor::certificate_case() const {
  return TrustAnchor::CertificateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RootStore

// repeated .chrome_root_store.TrustAnchor trust_anchors = 1;
inline int RootStore::_internal_trust_anchors_size() const {
  return trust_anchors_.size();
}
inline int RootStore::trust_anchors_size() const {
  return _internal_trust_anchors_size();
}
inline void RootStore::clear_trust_anchors() {
  trust_anchors_.Clear();
}
inline ::chrome_root_store::TrustAnchor* RootStore::mutable_trust_anchors(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_root_store.RootStore.trust_anchors)
  return trust_anchors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::TrustAnchor >*
RootStore::mutable_trust_anchors() {
  // @@protoc_insertion_point(field_mutable_list:chrome_root_store.RootStore.trust_anchors)
  return &trust_anchors_;
}
inline const ::chrome_root_store::TrustAnchor& RootStore::_internal_trust_anchors(int index) const {
  return trust_anchors_.Get(index);
}
inline const ::chrome_root_store::TrustAnchor& RootStore::trust_anchors(int index) const {
  // @@protoc_insertion_point(field_get:chrome_root_store.RootStore.trust_anchors)
  return _internal_trust_anchors(index);
}
inline ::chrome_root_store::TrustAnchor* RootStore::_internal_add_trust_anchors() {
  return trust_anchors_.Add();
}
inline ::chrome_root_store::TrustAnchor* RootStore::add_trust_anchors() {
  ::chrome_root_store::TrustAnchor* _add = _internal_add_trust_anchors();
  // @@protoc_insertion_point(field_add:chrome_root_store.RootStore.trust_anchors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::TrustAnchor >&
RootStore::trust_anchors() const {
  // @@protoc_insertion_point(field_list:chrome_root_store.RootStore.trust_anchors)
  return trust_anchors_;
}

// int64 version_major = 2;
inline void RootStore::clear_version_major() {
  version_major_ = int64_t{0};
}
inline int64_t RootStore::_internal_version_major() const {
  return version_major_;
}
inline int64_t RootStore::version_major() const {
  // @@protoc_insertion_point(field_get:chrome_root_store.RootStore.version_major)
  return _internal_version_major();
}
inline void RootStore::_internal_set_version_major(int64_t value) {
  
  version_major_ = value;
}
inline void RootStore::set_version_major(int64_t value) {
  _internal_set_version_major(value);
  // @@protoc_insertion_point(field_set:chrome_root_store.RootStore.version_major)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_root_store

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_root_5fstore_2eproto

#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/statsd/statsd_atom.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

StatsdAtom::StatsdAtom() = default;
StatsdAtom::~StatsdAtom() = default;
StatsdAtom::StatsdAtom(const StatsdAtom&) = default;
StatsdAtom& StatsdAtom::operator=(const StatsdAtom&) = default;
StatsdAtom::StatsdAtom(StatsdAtom&&) noexcept = default;
StatsdAtom& StatsdAtom::operator=(StatsdAtom&&) = default;

bool StatsdAtom::operator==(const StatsdAtom& other) const {
  return unknown_fields_ == other.unknown_fields_
   && nested_ == other.nested_;
}

int StatsdAtom::nested_size() const { return static_cast<int>(nested_.size()); }
void StatsdAtom::clear_nested() { nested_.clear(); }
OpaqueAtom* StatsdAtom::add_nested() { nested_.emplace_back(); return &nested_.back(); }
bool StatsdAtom::ParseFromArray(const void* raw, size_t size) {
  nested_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nested */:
        nested_.emplace_back();
        nested_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string StatsdAtom::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> StatsdAtom::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void StatsdAtom::Serialize(::protozero::Message* msg) const {
  // Field 1: nested
  for (auto& it : nested_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


OpaqueAtom::OpaqueAtom() = default;
OpaqueAtom::~OpaqueAtom() = default;
OpaqueAtom::OpaqueAtom(const OpaqueAtom&) = default;
OpaqueAtom& OpaqueAtom::operator=(const OpaqueAtom&) = default;
OpaqueAtom::OpaqueAtom(OpaqueAtom&&) noexcept = default;
OpaqueAtom& OpaqueAtom::operator=(OpaqueAtom&&) = default;

bool OpaqueAtom::operator==(const OpaqueAtom& other) const {
  return unknown_fields_ == other.unknown_fields_;
}

bool OpaqueAtom::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string OpaqueAtom::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> OpaqueAtom::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void OpaqueAtom::Serialize(::protozero::Message* msg) const {
  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif

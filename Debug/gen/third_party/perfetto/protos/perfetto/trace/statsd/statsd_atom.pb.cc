// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/statsd/statsd_atom.proto

#include "protos/perfetto/trace/statsd/statsd_atom.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR OpaqueAtom::OpaqueAtom(
    ::_pbi::ConstantInitialized){}
struct OpaqueAtomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpaqueAtomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpaqueAtomDefaultTypeInternal() {}
  union {
    OpaqueAtom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpaqueAtomDefaultTypeInternal _OpaqueAtom_default_instance_;
PROTOBUF_CONSTEXPR StatsdAtom::StatsdAtom(
    ::_pbi::ConstantInitialized)
  : nested_(){}
struct StatsdAtomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsdAtomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsdAtomDefaultTypeInternal() {}
  union {
    StatsdAtom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsdAtomDefaultTypeInternal _StatsdAtom_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class OpaqueAtom::_Internal {
 public:
};

OpaqueAtom::OpaqueAtom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.OpaqueAtom)
}
OpaqueAtom::OpaqueAtom(const OpaqueAtom& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.OpaqueAtom)
}

inline void OpaqueAtom::SharedCtor() {
}

OpaqueAtom::~OpaqueAtom() {
  // @@protoc_insertion_point(destructor:perfetto.protos.OpaqueAtom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpaqueAtom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OpaqueAtom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpaqueAtom::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.OpaqueAtom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* OpaqueAtom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpaqueAtom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.OpaqueAtom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.OpaqueAtom)
  return target;
}

size_t OpaqueAtom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.OpaqueAtom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpaqueAtom::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OpaqueAtom*>(
      &from));
}

void OpaqueAtom::MergeFrom(const OpaqueAtom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.OpaqueAtom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OpaqueAtom::CopyFrom(const OpaqueAtom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.OpaqueAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpaqueAtom::IsInitialized() const {
  return true;
}

void OpaqueAtom::InternalSwap(OpaqueAtom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string OpaqueAtom::GetTypeName() const {
  return "perfetto.protos.OpaqueAtom";
}


// ===================================================================

class StatsdAtom::_Internal {
 public:
};

StatsdAtom::StatsdAtom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  nested_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StatsdAtom)
}
StatsdAtom::StatsdAtom(const StatsdAtom& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      nested_(from.nested_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StatsdAtom)
}

inline void StatsdAtom::SharedCtor() {
}

StatsdAtom::~StatsdAtom() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StatsdAtom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsdAtom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatsdAtom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatsdAtom::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StatsdAtom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nested_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StatsdAtom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.OpaqueAtom nested = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nested(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatsdAtom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StatsdAtom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.OpaqueAtom nested = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nested_size()); i < n; i++) {
    const auto& repfield = this->_internal_nested(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StatsdAtom)
  return target;
}

size_t StatsdAtom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StatsdAtom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.OpaqueAtom nested = 1;
  total_size += 1UL * this->_internal_nested_size();
  for (const auto& msg : this->nested_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatsdAtom::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StatsdAtom*>(
      &from));
}

void StatsdAtom::MergeFrom(const StatsdAtom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StatsdAtom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nested_.MergeFrom(from.nested_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StatsdAtom::CopyFrom(const StatsdAtom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StatsdAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsdAtom::IsInitialized() const {
  return true;
}

void StatsdAtom::InternalSwap(StatsdAtom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nested_.InternalSwap(&other->nested_);
}

std::string StatsdAtom::GetTypeName() const {
  return "perfetto.protos.StatsdAtom";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::OpaqueAtom*
Arena::CreateMaybeMessage< ::perfetto::protos::OpaqueAtom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::OpaqueAtom >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StatsdAtom*
Arena::CreateMaybeMessage< ::perfetto::protos::StatsdAtom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StatsdAtom >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_STATSD_STATSD_ATOM_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_STATSD_STATSD_ATOM_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class StatsdAtom;
class OpaqueAtom;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT StatsdAtom : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kNestedFieldNumber = 1,
  };

  StatsdAtom();
  ~StatsdAtom() override;
  StatsdAtom(StatsdAtom&&) noexcept;
  StatsdAtom& operator=(StatsdAtom&&);
  StatsdAtom(const StatsdAtom&);
  StatsdAtom& operator=(const StatsdAtom&);
  bool operator==(const StatsdAtom&) const;
  bool operator!=(const StatsdAtom& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<OpaqueAtom>& nested() const { return nested_; }
  std::vector<OpaqueAtom>* mutable_nested() { return &nested_; }
  int nested_size() const;
  void clear_nested();
  OpaqueAtom* add_nested();

 private:
  std::vector<OpaqueAtom> nested_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT OpaqueAtom : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
  };

  OpaqueAtom();
  ~OpaqueAtom() override;
  OpaqueAtom(OpaqueAtom&&) noexcept;
  OpaqueAtom& operator=(OpaqueAtom&&);
  OpaqueAtom(const OpaqueAtom&);
  OpaqueAtom& operator=(const OpaqueAtom&);
  bool operator==(const OpaqueAtom&) const;
  bool operator!=(const OpaqueAtom& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

 private:

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_STATSD_STATSD_ATOM_PROTO_CPP_H_

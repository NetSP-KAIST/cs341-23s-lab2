// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/network_trace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class NetworkPacketEvent;
struct NetworkPacketEventDefaultTypeInternal;
extern NetworkPacketEventDefaultTypeInternal _NetworkPacketEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::NetworkPacketEvent* Arena::CreateMaybeMessage<::perfetto::protos::NetworkPacketEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum TrafficDirection : int {
  DIR_UNSPECIFIED = 0,
  DIR_INGRESS = 1,
  DIR_EGRESS = 2
};
bool TrafficDirection_IsValid(int value);
constexpr TrafficDirection TrafficDirection_MIN = DIR_UNSPECIFIED;
constexpr TrafficDirection TrafficDirection_MAX = DIR_EGRESS;
constexpr int TrafficDirection_ARRAYSIZE = TrafficDirection_MAX + 1;

const std::string& TrafficDirection_Name(TrafficDirection value);
template<typename T>
inline const std::string& TrafficDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficDirection_Name.");
  return TrafficDirection_Name(static_cast<TrafficDirection>(enum_t_value));
}
bool TrafficDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrafficDirection* value);
// ===================================================================

class NetworkPacketEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.NetworkPacketEvent) */ {
 public:
  inline NetworkPacketEvent() : NetworkPacketEvent(nullptr) {}
  ~NetworkPacketEvent() override;
  explicit PROTOBUF_CONSTEXPR NetworkPacketEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkPacketEvent(const NetworkPacketEvent& from);
  NetworkPacketEvent(NetworkPacketEvent&& from) noexcept
    : NetworkPacketEvent() {
    *this = ::std::move(from);
  }

  inline NetworkPacketEvent& operator=(const NetworkPacketEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkPacketEvent& operator=(NetworkPacketEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NetworkPacketEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkPacketEvent* internal_default_instance() {
    return reinterpret_cast<const NetworkPacketEvent*>(
               &_NetworkPacketEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkPacketEvent& a, NetworkPacketEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(NetworkPacketEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkPacketEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkPacketEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkPacketEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NetworkPacketEvent& from);
  void MergeFrom(const NetworkPacketEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkPacketEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.NetworkPacketEvent";
  }
  protected:
  explicit NetworkPacketEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 2,
    kDirectionFieldNumber = 1,
    kLengthFieldNumber = 3,
    kUidFieldNumber = 4,
    kTagFieldNumber = 5,
    kIpProtoFieldNumber = 6,
    kTcpFlagsFieldNumber = 7,
    kLocalPortFieldNumber = 8,
    kRemotePortFieldNumber = 9,
  };
  // optional string interface = 2;
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const std::string& interface() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interface(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interface();
  PROTOBUF_NODISCARD std::string* release_interface();
  void set_allocated_interface(std::string* interface);
  private:
  const std::string& _internal_interface() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface(const std::string& value);
  std::string* _internal_mutable_interface();
  public:

  // optional .perfetto.protos.TrafficDirection direction = 1;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::perfetto::protos::TrafficDirection direction() const;
  void set_direction(::perfetto::protos::TrafficDirection value);
  private:
  ::perfetto::protos::TrafficDirection _internal_direction() const;
  void _internal_set_direction(::perfetto::protos::TrafficDirection value);
  public:

  // optional uint32 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // optional uint32 uid = 4;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  uint32_t uid() const;
  void set_uid(uint32_t value);
  private:
  uint32_t _internal_uid() const;
  void _internal_set_uid(uint32_t value);
  public:

  // optional uint32 tag = 5;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  uint32_t tag() const;
  void set_tag(uint32_t value);
  private:
  uint32_t _internal_tag() const;
  void _internal_set_tag(uint32_t value);
  public:

  // optional uint32 ip_proto = 6;
  bool has_ip_proto() const;
  private:
  bool _internal_has_ip_proto() const;
  public:
  void clear_ip_proto();
  uint32_t ip_proto() const;
  void set_ip_proto(uint32_t value);
  private:
  uint32_t _internal_ip_proto() const;
  void _internal_set_ip_proto(uint32_t value);
  public:

  // optional uint32 tcp_flags = 7;
  bool has_tcp_flags() const;
  private:
  bool _internal_has_tcp_flags() const;
  public:
  void clear_tcp_flags();
  uint32_t tcp_flags() const;
  void set_tcp_flags(uint32_t value);
  private:
  uint32_t _internal_tcp_flags() const;
  void _internal_set_tcp_flags(uint32_t value);
  public:

  // optional uint32 local_port = 8;
  bool has_local_port() const;
  private:
  bool _internal_has_local_port() const;
  public:
  void clear_local_port();
  uint32_t local_port() const;
  void set_local_port(uint32_t value);
  private:
  uint32_t _internal_local_port() const;
  void _internal_set_local_port(uint32_t value);
  public:

  // optional uint32 remote_port = 9;
  bool has_remote_port() const;
  private:
  bool _internal_has_remote_port() const;
  public:
  void clear_remote_port();
  uint32_t remote_port() const;
  void set_remote_port(uint32_t value);
  private:
  uint32_t _internal_remote_port() const;
  void _internal_set_remote_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.NetworkPacketEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_;
  int direction_;
  uint32_t length_;
  uint32_t uid_;
  uint32_t tag_;
  uint32_t ip_proto_;
  uint32_t tcp_flags_;
  uint32_t local_port_;
  uint32_t remote_port_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkPacketEvent

// optional .perfetto.protos.TrafficDirection direction = 1;
inline bool NetworkPacketEvent::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkPacketEvent::has_direction() const {
  return _internal_has_direction();
}
inline void NetworkPacketEvent::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::TrafficDirection NetworkPacketEvent::_internal_direction() const {
  return static_cast< ::perfetto::protos::TrafficDirection >(direction_);
}
inline ::perfetto::protos::TrafficDirection NetworkPacketEvent::direction() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.direction)
  return _internal_direction();
}
inline void NetworkPacketEvent::_internal_set_direction(::perfetto::protos::TrafficDirection value) {
  assert(::perfetto::protos::TrafficDirection_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  direction_ = value;
}
inline void NetworkPacketEvent::set_direction(::perfetto::protos::TrafficDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.direction)
}

// optional string interface = 2;
inline bool NetworkPacketEvent::_internal_has_interface() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkPacketEvent::has_interface() const {
  return _internal_has_interface();
}
inline void NetworkPacketEvent::clear_interface() {
  interface_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkPacketEvent::interface() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.interface)
  return _internal_interface();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkPacketEvent::set_interface(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 interface_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.interface)
}
inline std::string* NetworkPacketEvent::mutable_interface() {
  std::string* _s = _internal_mutable_interface();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.NetworkPacketEvent.interface)
  return _s;
}
inline const std::string& NetworkPacketEvent::_internal_interface() const {
  return interface_.Get();
}
inline void NetworkPacketEvent::_internal_set_interface(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  interface_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkPacketEvent::_internal_mutable_interface() {
  _has_bits_[0] |= 0x00000001u;
  return interface_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkPacketEvent::release_interface() {
  // @@protoc_insertion_point(field_release:perfetto.protos.NetworkPacketEvent.interface)
  if (!_internal_has_interface()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = interface_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (interface_.IsDefault()) {
    interface_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetworkPacketEvent::set_allocated_interface(std::string* interface) {
  if (interface != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  interface_.SetAllocated(interface, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (interface_.IsDefault()) {
    interface_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.NetworkPacketEvent.interface)
}

// optional uint32 length = 3;
inline bool NetworkPacketEvent::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkPacketEvent::has_length() const {
  return _internal_has_length();
}
inline void NetworkPacketEvent::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t NetworkPacketEvent::_internal_length() const {
  return length_;
}
inline uint32_t NetworkPacketEvent::length() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.length)
  return _internal_length();
}
inline void NetworkPacketEvent::_internal_set_length(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  length_ = value;
}
inline void NetworkPacketEvent::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.length)
}

// optional uint32 uid = 4;
inline bool NetworkPacketEvent::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetworkPacketEvent::has_uid() const {
  return _internal_has_uid();
}
inline void NetworkPacketEvent::clear_uid() {
  uid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t NetworkPacketEvent::_internal_uid() const {
  return uid_;
}
inline uint32_t NetworkPacketEvent::uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.uid)
  return _internal_uid();
}
inline void NetworkPacketEvent::_internal_set_uid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  uid_ = value;
}
inline void NetworkPacketEvent::set_uid(uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.uid)
}

// optional uint32 tag = 5;
inline bool NetworkPacketEvent::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetworkPacketEvent::has_tag() const {
  return _internal_has_tag();
}
inline void NetworkPacketEvent::clear_tag() {
  tag_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t NetworkPacketEvent::_internal_tag() const {
  return tag_;
}
inline uint32_t NetworkPacketEvent::tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.tag)
  return _internal_tag();
}
inline void NetworkPacketEvent::_internal_set_tag(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  tag_ = value;
}
inline void NetworkPacketEvent::set_tag(uint32_t value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.tag)
}

// optional uint32 ip_proto = 6;
inline bool NetworkPacketEvent::_internal_has_ip_proto() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NetworkPacketEvent::has_ip_proto() const {
  return _internal_has_ip_proto();
}
inline void NetworkPacketEvent::clear_ip_proto() {
  ip_proto_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t NetworkPacketEvent::_internal_ip_proto() const {
  return ip_proto_;
}
inline uint32_t NetworkPacketEvent::ip_proto() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.ip_proto)
  return _internal_ip_proto();
}
inline void NetworkPacketEvent::_internal_set_ip_proto(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  ip_proto_ = value;
}
inline void NetworkPacketEvent::set_ip_proto(uint32_t value) {
  _internal_set_ip_proto(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.ip_proto)
}

// optional uint32 tcp_flags = 7;
inline bool NetworkPacketEvent::_internal_has_tcp_flags() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NetworkPacketEvent::has_tcp_flags() const {
  return _internal_has_tcp_flags();
}
inline void NetworkPacketEvent::clear_tcp_flags() {
  tcp_flags_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t NetworkPacketEvent::_internal_tcp_flags() const {
  return tcp_flags_;
}
inline uint32_t NetworkPacketEvent::tcp_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.tcp_flags)
  return _internal_tcp_flags();
}
inline void NetworkPacketEvent::_internal_set_tcp_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  tcp_flags_ = value;
}
inline void NetworkPacketEvent::set_tcp_flags(uint32_t value) {
  _internal_set_tcp_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.tcp_flags)
}

// optional uint32 local_port = 8;
inline bool NetworkPacketEvent::_internal_has_local_port() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NetworkPacketEvent::has_local_port() const {
  return _internal_has_local_port();
}
inline void NetworkPacketEvent::clear_local_port() {
  local_port_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t NetworkPacketEvent::_internal_local_port() const {
  return local_port_;
}
inline uint32_t NetworkPacketEvent::local_port() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.local_port)
  return _internal_local_port();
}
inline void NetworkPacketEvent::_internal_set_local_port(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  local_port_ = value;
}
inline void NetworkPacketEvent::set_local_port(uint32_t value) {
  _internal_set_local_port(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.local_port)
}

// optional uint32 remote_port = 9;
inline bool NetworkPacketEvent::_internal_has_remote_port() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NetworkPacketEvent::has_remote_port() const {
  return _internal_has_remote_port();
}
inline void NetworkPacketEvent::clear_remote_port() {
  remote_port_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t NetworkPacketEvent::_internal_remote_port() const {
  return remote_port_;
}
inline uint32_t NetworkPacketEvent::remote_port() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.remote_port)
  return _internal_remote_port();
}
inline void NetworkPacketEvent::_internal_set_remote_port(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  remote_port_ = value;
}
inline void NetworkPacketEvent::set_remote_port(uint32_t value) {
  _internal_set_remote_port(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.remote_port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::TrafficDirection> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto

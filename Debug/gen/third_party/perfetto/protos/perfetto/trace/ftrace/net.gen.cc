#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/net.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

NapiGroReceiveExitFtraceEvent::NapiGroReceiveExitFtraceEvent() = default;
NapiGroReceiveExitFtraceEvent::~NapiGroReceiveExitFtraceEvent() = default;
NapiGroReceiveExitFtraceEvent::NapiGroReceiveExitFtraceEvent(const NapiGroReceiveExitFtraceEvent&) = default;
NapiGroReceiveExitFtraceEvent& NapiGroReceiveExitFtraceEvent::operator=(const NapiGroReceiveExitFtraceEvent&) = default;
NapiGroReceiveExitFtraceEvent::NapiGroReceiveExitFtraceEvent(NapiGroReceiveExitFtraceEvent&&) noexcept = default;
NapiGroReceiveExitFtraceEvent& NapiGroReceiveExitFtraceEvent::operator=(NapiGroReceiveExitFtraceEvent&&) = default;

bool NapiGroReceiveExitFtraceEvent::operator==(const NapiGroReceiveExitFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && ret_ == other.ret_;
}

bool NapiGroReceiveExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string NapiGroReceiveExitFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> NapiGroReceiveExitFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void NapiGroReceiveExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: ret
  if (_has_field_[1]) {
    msg->AppendVarInt(1, ret_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


NapiGroReceiveEntryFtraceEvent::NapiGroReceiveEntryFtraceEvent() = default;
NapiGroReceiveEntryFtraceEvent::~NapiGroReceiveEntryFtraceEvent() = default;
NapiGroReceiveEntryFtraceEvent::NapiGroReceiveEntryFtraceEvent(const NapiGroReceiveEntryFtraceEvent&) = default;
NapiGroReceiveEntryFtraceEvent& NapiGroReceiveEntryFtraceEvent::operator=(const NapiGroReceiveEntryFtraceEvent&) = default;
NapiGroReceiveEntryFtraceEvent::NapiGroReceiveEntryFtraceEvent(NapiGroReceiveEntryFtraceEvent&&) noexcept = default;
NapiGroReceiveEntryFtraceEvent& NapiGroReceiveEntryFtraceEvent::operator=(NapiGroReceiveEntryFtraceEvent&&) = default;

bool NapiGroReceiveEntryFtraceEvent::operator==(const NapiGroReceiveEntryFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && data_len_ == other.data_len_
   && gso_size_ == other.gso_size_
   && gso_type_ == other.gso_type_
   && hash_ == other.hash_
   && ip_summed_ == other.ip_summed_
   && l4_hash_ == other.l4_hash_
   && len_ == other.len_
   && mac_header_ == other.mac_header_
   && mac_header_valid_ == other.mac_header_valid_
   && name_ == other.name_
   && napi_id_ == other.napi_id_
   && nr_frags_ == other.nr_frags_
   && protocol_ == other.protocol_
   && queue_mapping_ == other.queue_mapping_
   && skbaddr_ == other.skbaddr_
   && truesize_ == other.truesize_
   && vlan_proto_ == other.vlan_proto_
   && vlan_tagged_ == other.vlan_tagged_
   && vlan_tci_ == other.vlan_tci_;
}

bool NapiGroReceiveEntryFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* data_len */:
        field.get(&data_len_);
        break;
      case 2 /* gso_size */:
        field.get(&gso_size_);
        break;
      case 3 /* gso_type */:
        field.get(&gso_type_);
        break;
      case 4 /* hash */:
        field.get(&hash_);
        break;
      case 5 /* ip_summed */:
        field.get(&ip_summed_);
        break;
      case 6 /* l4_hash */:
        field.get(&l4_hash_);
        break;
      case 7 /* len */:
        field.get(&len_);
        break;
      case 8 /* mac_header */:
        field.get(&mac_header_);
        break;
      case 9 /* mac_header_valid */:
        field.get(&mac_header_valid_);
        break;
      case 10 /* name */:
        field.get(&name_);
        break;
      case 11 /* napi_id */:
        field.get(&napi_id_);
        break;
      case 12 /* nr_frags */:
        field.get(&nr_frags_);
        break;
      case 13 /* protocol */:
        field.get(&protocol_);
        break;
      case 14 /* queue_mapping */:
        field.get(&queue_mapping_);
        break;
      case 15 /* skbaddr */:
        field.get(&skbaddr_);
        break;
      case 16 /* truesize */:
        field.get(&truesize_);
        break;
      case 17 /* vlan_proto */:
        field.get(&vlan_proto_);
        break;
      case 18 /* vlan_tagged */:
        field.get(&vlan_tagged_);
        break;
      case 19 /* vlan_tci */:
        field.get(&vlan_tci_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string NapiGroReceiveEntryFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> NapiGroReceiveEntryFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void NapiGroReceiveEntryFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: data_len
  if (_has_field_[1]) {
    msg->AppendVarInt(1, data_len_);
  }

  // Field 2: gso_size
  if (_has_field_[2]) {
    msg->AppendVarInt(2, gso_size_);
  }

  // Field 3: gso_type
  if (_has_field_[3]) {
    msg->AppendVarInt(3, gso_type_);
  }

  // Field 4: hash
  if (_has_field_[4]) {
    msg->AppendVarInt(4, hash_);
  }

  // Field 5: ip_summed
  if (_has_field_[5]) {
    msg->AppendVarInt(5, ip_summed_);
  }

  // Field 6: l4_hash
  if (_has_field_[6]) {
    msg->AppendVarInt(6, l4_hash_);
  }

  // Field 7: len
  if (_has_field_[7]) {
    msg->AppendVarInt(7, len_);
  }

  // Field 8: mac_header
  if (_has_field_[8]) {
    msg->AppendVarInt(8, mac_header_);
  }

  // Field 9: mac_header_valid
  if (_has_field_[9]) {
    msg->AppendVarInt(9, mac_header_valid_);
  }

  // Field 10: name
  if (_has_field_[10]) {
    msg->AppendString(10, name_);
  }

  // Field 11: napi_id
  if (_has_field_[11]) {
    msg->AppendVarInt(11, napi_id_);
  }

  // Field 12: nr_frags
  if (_has_field_[12]) {
    msg->AppendVarInt(12, nr_frags_);
  }

  // Field 13: protocol
  if (_has_field_[13]) {
    msg->AppendVarInt(13, protocol_);
  }

  // Field 14: queue_mapping
  if (_has_field_[14]) {
    msg->AppendVarInt(14, queue_mapping_);
  }

  // Field 15: skbaddr
  if (_has_field_[15]) {
    msg->AppendVarInt(15, skbaddr_);
  }

  // Field 16: truesize
  if (_has_field_[16]) {
    msg->AppendVarInt(16, truesize_);
  }

  // Field 17: vlan_proto
  if (_has_field_[17]) {
    msg->AppendVarInt(17, vlan_proto_);
  }

  // Field 18: vlan_tagged
  if (_has_field_[18]) {
    msg->AppendVarInt(18, vlan_tagged_);
  }

  // Field 19: vlan_tci
  if (_has_field_[19]) {
    msg->AppendVarInt(19, vlan_tci_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


NetDevXmitFtraceEvent::NetDevXmitFtraceEvent() = default;
NetDevXmitFtraceEvent::~NetDevXmitFtraceEvent() = default;
NetDevXmitFtraceEvent::NetDevXmitFtraceEvent(const NetDevXmitFtraceEvent&) = default;
NetDevXmitFtraceEvent& NetDevXmitFtraceEvent::operator=(const NetDevXmitFtraceEvent&) = default;
NetDevXmitFtraceEvent::NetDevXmitFtraceEvent(NetDevXmitFtraceEvent&&) noexcept = default;
NetDevXmitFtraceEvent& NetDevXmitFtraceEvent::operator=(NetDevXmitFtraceEvent&&) = default;

bool NetDevXmitFtraceEvent::operator==(const NetDevXmitFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && len_ == other.len_
   && name_ == other.name_
   && rc_ == other.rc_
   && skbaddr_ == other.skbaddr_;
}

bool NetDevXmitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* len */:
        field.get(&len_);
        break;
      case 2 /* name */:
        field.get(&name_);
        break;
      case 3 /* rc */:
        field.get(&rc_);
        break;
      case 4 /* skbaddr */:
        field.get(&skbaddr_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string NetDevXmitFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> NetDevXmitFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void NetDevXmitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: len
  if (_has_field_[1]) {
    msg->AppendVarInt(1, len_);
  }

  // Field 2: name
  if (_has_field_[2]) {
    msg->AppendString(2, name_);
  }

  // Field 3: rc
  if (_has_field_[3]) {
    msg->AppendVarInt(3, rc_);
  }

  // Field 4: skbaddr
  if (_has_field_[4]) {
    msg->AppendVarInt(4, skbaddr_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


NetifReceiveSkbFtraceEvent::NetifReceiveSkbFtraceEvent() = default;
NetifReceiveSkbFtraceEvent::~NetifReceiveSkbFtraceEvent() = default;
NetifReceiveSkbFtraceEvent::NetifReceiveSkbFtraceEvent(const NetifReceiveSkbFtraceEvent&) = default;
NetifReceiveSkbFtraceEvent& NetifReceiveSkbFtraceEvent::operator=(const NetifReceiveSkbFtraceEvent&) = default;
NetifReceiveSkbFtraceEvent::NetifReceiveSkbFtraceEvent(NetifReceiveSkbFtraceEvent&&) noexcept = default;
NetifReceiveSkbFtraceEvent& NetifReceiveSkbFtraceEvent::operator=(NetifReceiveSkbFtraceEvent&&) = default;

bool NetifReceiveSkbFtraceEvent::operator==(const NetifReceiveSkbFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && len_ == other.len_
   && name_ == other.name_
   && skbaddr_ == other.skbaddr_;
}

bool NetifReceiveSkbFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* len */:
        field.get(&len_);
        break;
      case 2 /* name */:
        field.get(&name_);
        break;
      case 3 /* skbaddr */:
        field.get(&skbaddr_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string NetifReceiveSkbFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> NetifReceiveSkbFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void NetifReceiveSkbFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: len
  if (_has_field_[1]) {
    msg->AppendVarInt(1, len_);
  }

  // Field 2: name
  if (_has_field_[2]) {
    msg->AppendString(2, name_);
  }

  // Field 3: skbaddr
  if (_has_field_[3]) {
    msg->AppendVarInt(3, skbaddr_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif

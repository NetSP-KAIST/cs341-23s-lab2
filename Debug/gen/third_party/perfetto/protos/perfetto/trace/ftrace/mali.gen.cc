#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/mali.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent() = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent::~MaliMaliKCPUFENCEWAITENDFtraceEvent() = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(const MaliMaliKCPUFENCEWAITENDFtraceEvent&) = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent& MaliMaliKCPUFENCEWAITENDFtraceEvent::operator=(const MaliMaliKCPUFENCEWAITENDFtraceEvent&) = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(MaliMaliKCPUFENCEWAITENDFtraceEvent&&) noexcept = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent& MaliMaliKCPUFENCEWAITENDFtraceEvent::operator=(MaliMaliKCPUFENCEWAITENDFtraceEvent&&) = default;

bool MaliMaliKCPUFENCEWAITENDFtraceEvent::operator==(const MaliMaliKCPUFENCEWAITENDFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && info_val1_ == other.info_val1_
   && info_val2_ == other.info_val2_
   && kctx_tgid_ == other.kctx_tgid_
   && kctx_id_ == other.kctx_id_
   && id_ == other.id_;
}

bool MaliMaliKCPUFENCEWAITENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 2 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 3 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* id */:
        field.get(&id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUFENCEWAITENDFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUFENCEWAITENDFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: info_val1
  if (_has_field_[1]) {
    msg->AppendVarInt(1, info_val1_);
  }

  // Field 2: info_val2
  if (_has_field_[2]) {
    msg->AppendVarInt(2, info_val2_);
  }

  // Field 3: kctx_tgid
  if (_has_field_[3]) {
    msg->AppendVarInt(3, kctx_tgid_);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    msg->AppendVarInt(4, kctx_id_);
  }

  // Field 5: id
  if (_has_field_[5]) {
    msg->AppendVarInt(5, id_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent() = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent::~MaliMaliKCPUFENCEWAITSTARTFtraceEvent() = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent&) = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent& MaliMaliKCPUFENCEWAITSTARTFtraceEvent::operator=(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent&) = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(MaliMaliKCPUFENCEWAITSTARTFtraceEvent&&) noexcept = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent& MaliMaliKCPUFENCEWAITSTARTFtraceEvent::operator=(MaliMaliKCPUFENCEWAITSTARTFtraceEvent&&) = default;

bool MaliMaliKCPUFENCEWAITSTARTFtraceEvent::operator==(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && info_val1_ == other.info_val1_
   && info_val2_ == other.info_val2_
   && kctx_tgid_ == other.kctx_tgid_
   && kctx_id_ == other.kctx_id_
   && id_ == other.id_;
}

bool MaliMaliKCPUFENCEWAITSTARTFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 2 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 3 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* id */:
        field.get(&id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: info_val1
  if (_has_field_[1]) {
    msg->AppendVarInt(1, info_val1_);
  }

  // Field 2: info_val2
  if (_has_field_[2]) {
    msg->AppendVarInt(2, info_val2_);
  }

  // Field 3: kctx_tgid
  if (_has_field_[3]) {
    msg->AppendVarInt(3, kctx_tgid_);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    msg->AppendVarInt(4, kctx_id_);
  }

  // Field 5: id
  if (_has_field_[5]) {
    msg->AppendVarInt(5, id_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent() = default;
MaliMaliKCPUFENCESIGNALFtraceEvent::~MaliMaliKCPUFENCESIGNALFtraceEvent() = default;
MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(const MaliMaliKCPUFENCESIGNALFtraceEvent&) = default;
MaliMaliKCPUFENCESIGNALFtraceEvent& MaliMaliKCPUFENCESIGNALFtraceEvent::operator=(const MaliMaliKCPUFENCESIGNALFtraceEvent&) = default;
MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(MaliMaliKCPUFENCESIGNALFtraceEvent&&) noexcept = default;
MaliMaliKCPUFENCESIGNALFtraceEvent& MaliMaliKCPUFENCESIGNALFtraceEvent::operator=(MaliMaliKCPUFENCESIGNALFtraceEvent&&) = default;

bool MaliMaliKCPUFENCESIGNALFtraceEvent::operator==(const MaliMaliKCPUFENCESIGNALFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && info_val1_ == other.info_val1_
   && info_val2_ == other.info_val2_
   && kctx_tgid_ == other.kctx_tgid_
   && kctx_id_ == other.kctx_id_
   && id_ == other.id_;
}

bool MaliMaliKCPUFENCESIGNALFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 2 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 3 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* id */:
        field.get(&id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUFENCESIGNALFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUFENCESIGNALFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: info_val1
  if (_has_field_[1]) {
    msg->AppendVarInt(1, info_val1_);
  }

  // Field 2: info_val2
  if (_has_field_[2]) {
    msg->AppendVarInt(2, info_val2_);
  }

  // Field 3: kctx_tgid
  if (_has_field_[3]) {
    msg->AppendVarInt(3, kctx_tgid_);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    msg->AppendVarInt(4, kctx_id_);
  }

  // Field 5: id
  if (_has_field_[5]) {
    msg->AppendVarInt(5, id_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent() = default;
MaliMaliKCPUCQSWAITENDFtraceEvent::~MaliMaliKCPUCQSWAITENDFtraceEvent() = default;
MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(const MaliMaliKCPUCQSWAITENDFtraceEvent&) = default;
MaliMaliKCPUCQSWAITENDFtraceEvent& MaliMaliKCPUCQSWAITENDFtraceEvent::operator=(const MaliMaliKCPUCQSWAITENDFtraceEvent&) = default;
MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(MaliMaliKCPUCQSWAITENDFtraceEvent&&) noexcept = default;
MaliMaliKCPUCQSWAITENDFtraceEvent& MaliMaliKCPUCQSWAITENDFtraceEvent::operator=(MaliMaliKCPUCQSWAITENDFtraceEvent&&) = default;

bool MaliMaliKCPUCQSWAITENDFtraceEvent::operator==(const MaliMaliKCPUCQSWAITENDFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && id_ == other.id_
   && info_val1_ == other.info_val1_
   && info_val2_ == other.info_val2_
   && kctx_id_ == other.kctx_id_
   && kctx_tgid_ == other.kctx_tgid_;
}

bool MaliMaliKCPUCQSWAITENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 3 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUCQSWAITENDFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUCQSWAITENDFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    msg->AppendVarInt(1, id_);
  }

  // Field 2: info_val1
  if (_has_field_[2]) {
    msg->AppendVarInt(2, info_val1_);
  }

  // Field 3: info_val2
  if (_has_field_[3]) {
    msg->AppendVarInt(3, info_val2_);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    msg->AppendVarInt(4, kctx_id_);
  }

  // Field 5: kctx_tgid
  if (_has_field_[5]) {
    msg->AppendVarInt(5, kctx_tgid_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent() = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent::~MaliMaliKCPUCQSWAITSTARTFtraceEvent() = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(const MaliMaliKCPUCQSWAITSTARTFtraceEvent&) = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent& MaliMaliKCPUCQSWAITSTARTFtraceEvent::operator=(const MaliMaliKCPUCQSWAITSTARTFtraceEvent&) = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(MaliMaliKCPUCQSWAITSTARTFtraceEvent&&) noexcept = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent& MaliMaliKCPUCQSWAITSTARTFtraceEvent::operator=(MaliMaliKCPUCQSWAITSTARTFtraceEvent&&) = default;

bool MaliMaliKCPUCQSWAITSTARTFtraceEvent::operator==(const MaliMaliKCPUCQSWAITSTARTFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && id_ == other.id_
   && info_val1_ == other.info_val1_
   && info_val2_ == other.info_val2_
   && kctx_id_ == other.kctx_id_
   && kctx_tgid_ == other.kctx_tgid_;
}

bool MaliMaliKCPUCQSWAITSTARTFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 3 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUCQSWAITSTARTFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUCQSWAITSTARTFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    msg->AppendVarInt(1, id_);
  }

  // Field 2: info_val1
  if (_has_field_[2]) {
    msg->AppendVarInt(2, info_val1_);
  }

  // Field 3: info_val2
  if (_has_field_[3]) {
    msg->AppendVarInt(3, info_val2_);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    msg->AppendVarInt(4, kctx_id_);
  }

  // Field 5: kctx_tgid
  if (_has_field_[5]) {
    msg->AppendVarInt(5, kctx_tgid_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent() = default;
MaliMaliKCPUCQSSETFtraceEvent::~MaliMaliKCPUCQSSETFtraceEvent() = default;
MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(const MaliMaliKCPUCQSSETFtraceEvent&) = default;
MaliMaliKCPUCQSSETFtraceEvent& MaliMaliKCPUCQSSETFtraceEvent::operator=(const MaliMaliKCPUCQSSETFtraceEvent&) = default;
MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(MaliMaliKCPUCQSSETFtraceEvent&&) noexcept = default;
MaliMaliKCPUCQSSETFtraceEvent& MaliMaliKCPUCQSSETFtraceEvent::operator=(MaliMaliKCPUCQSSETFtraceEvent&&) = default;

bool MaliMaliKCPUCQSSETFtraceEvent::operator==(const MaliMaliKCPUCQSSETFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && id_ == other.id_
   && info_val1_ == other.info_val1_
   && info_val2_ == other.info_val2_
   && kctx_id_ == other.kctx_id_
   && kctx_tgid_ == other.kctx_tgid_;
}

bool MaliMaliKCPUCQSSETFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 3 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUCQSSETFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUCQSSETFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUCQSSETFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    msg->AppendVarInt(1, id_);
  }

  // Field 2: info_val1
  if (_has_field_[2]) {
    msg->AppendVarInt(2, info_val1_);
  }

  // Field 3: info_val2
  if (_has_field_[3]) {
    msg->AppendVarInt(3, info_val2_);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    msg->AppendVarInt(4, kctx_id_);
  }

  // Field 5: kctx_tgid
  if (_has_field_[5]) {
    msg->AppendVarInt(5, kctx_tgid_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}


MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent() = default;
MaliTracingMarkWriteFtraceEvent::~MaliTracingMarkWriteFtraceEvent() = default;
MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(const MaliTracingMarkWriteFtraceEvent&) = default;
MaliTracingMarkWriteFtraceEvent& MaliTracingMarkWriteFtraceEvent::operator=(const MaliTracingMarkWriteFtraceEvent&) = default;
MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(MaliTracingMarkWriteFtraceEvent&&) noexcept = default;
MaliTracingMarkWriteFtraceEvent& MaliTracingMarkWriteFtraceEvent::operator=(MaliTracingMarkWriteFtraceEvent&&) = default;

bool MaliTracingMarkWriteFtraceEvent::operator==(const MaliTracingMarkWriteFtraceEvent& other) const {
  return unknown_fields_ == other.unknown_fields_
   && name_ == other.name_
   && pid_ == other.pid_
   && type_ == other.type_
   && value_ == other.value_;
}

bool MaliTracingMarkWriteFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        field.get(&name_);
        break;
      case 2 /* pid */:
        field.get(&pid_);
        break;
      case 3 /* type */:
        field.get(&type_);
        break;
      case 4 /* value */:
        field.get(&value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliTracingMarkWriteFtraceEvent::SerializeAsString() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliTracingMarkWriteFtraceEvent::SerializeAsArray() const {
  ::protozero::HeapBuffered<::protozero::Message> msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliTracingMarkWriteFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    msg->AppendString(1, name_);
  }

  // Field 2: pid
  if (_has_field_[2]) {
    msg->AppendVarInt(2, pid_);
  }

  // Field 3: type
  if (_has_field_[3]) {
    msg->AppendVarInt(3, type_);
  }

  // Field 4: value
  if (_has_field_[4]) {
    msg->AppendVarInt(4, value_);
  }

  msg->AppendRawProtoBytes(unknown_fields_.data(), unknown_fields_.size());
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
